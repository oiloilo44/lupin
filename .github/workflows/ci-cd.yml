name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  PYTHON_VERSION: "3.12"

jobs:
  # 1단계: 코드 품질 검사 (pre-commit hooks 활용)
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v2

      - name: Install Python dependencies
        run: uv sync

      # pre-commit 훅 실행 (기존 코드 품질 검사 대체)
      - name: Run pre-commit hooks
        run: uv run pre-commit run --all-files
        env:
          SKIP: no-commit-to-branch  # CI에서는 브랜치 제한 스킵

  # 2단계: E2E 테스트
  e2e-tests:
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v2

      - name: Install dependencies
        run: uv sync

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('uv.lock') }}

      - name: Install Playwright
        run: uv run playwright install --with-deps
        if: steps.playwright-cache.outputs.cache-hit != 'true'

      - name: Install Playwright (browsers only)
        run: uv run playwright install
        if: steps.playwright-cache.outputs.cache-hit == 'true'

      - name: Start test server
        run: |
          echo "Starting test server on port 8003..."
          uv run python main.py 8003 > server.log 2>&1 &
          echo $! > server.pid
          sleep 5
          echo "Server PID: $(cat server.pid)"
        env:
          PYTHONPATH: .

      - name: Wait for server to be ready
        run: |
          for i in {1..30}; do
            if curl -f http://localhost:8003/health 2>/dev/null; then
              echo "Server is ready!"
              break
            fi
            echo "Waiting for server... ($i/30)"
            sleep 2
          done

      - name: Check server logs before tests
        run: |
          echo "=== Server process check ==="
          ps aux | grep python || true
          echo "=== Server health check ==="
          curl -f http://localhost:8003/health || echo "Health check failed"
          echo "=== Test server endpoint ==="
          curl -f http://localhost:8003/ || echo "Root endpoint failed"

      - name: Run E2E tests (sequential mode for CI stability)
        run: uv run pytest tests/e2e/ -v --maxfail=3 -s
        env:
          HEADLESS: true
          TEST_SERVER_URL: http://localhost:8003
          CI_ENVIRONMENT: true

      - name: Show server logs on failure
        if: failure()
        run: |
          echo "=== Server logs ==="
          cat server.log || echo "No server logs found"
          echo "=== Server process status ==="
          ps aux | grep python || true

      - name: Stop test server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi

  # 3단계: 개인 서버 배포 (master 브랜치만)
  deploy:
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Personal Ubuntu Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            echo "🚀 개인 서버 배포 시작..."

            # 배포 디렉토리로 이동
            cd /opt/lupin || { echo "❌ 배포 디렉토리가 없습니다. /opt/lupin 생성 필요"; exit 1; }

            # 현재 버전 백업
            echo "📦 현재 버전 백업 중..."
            docker compose -f docker-compose.yml -f docker-compose.prod.yml down || true
            docker tag lupin-lupin-game:latest lupin-lupin-game:backup-$(date +%Y%m%d-%H%M%S) 2>/dev/null || true

            # 최신 코드 가져오기
            echo "📥 최신 코드 업데이트..."
            git fetch --all
            git reset --hard origin/master
            git pull origin master

            # Docker 이미지 빌드
            echo "🔨 Docker 이미지 빌드 중..."
            docker compose -f docker-compose.yml -f docker-compose.prod.yml build --no-cache

            # 서비스 시작
            echo "🚀 서비스 시작 중..."
            docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d

            # 헬스체크 대기
            echo "⏳ 서비스 시작 대기 중..."
            sleep 20

            # 헬스체크
            echo "🔍 헬스체크 실행 중..."
            for i in {1..5}; do
              if curl -f http://localhost:8000/health 2>/dev/null; then
                echo "✅ 헬스체크 성공!"
                # 이전 이미지 정리
                docker image prune -f
                echo "🎉 배포 완료!"
                echo "버전: ${{ github.sha }}"
                echo "시간: $(date '+%Y-%m-%d %H:%M:%S')"
                exit 0
              fi
              echo "헬스체크 실패, 재시도 중... ($i/5)"
              sleep 10
            done

            # 헬스체크 실패시 롤백
            echo "❌ 헬스체크 실패, 롤백 중..."
            docker compose -f docker-compose.yml -f docker-compose.prod.yml down
            docker tag lupin-lupin-game:backup-$(date +%Y%m%d-%H%M%S) lupin-lupin-game:latest 2>/dev/null || true
            docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d
            echo "🔄 이전 버전으로 롤백 완료"
            exit 1

  # 배포 실패 시 추가 알림
  notify-failure:
    runs-on: ubuntu-latest
    needs: deploy
    if: failure() && github.ref == 'refs/heads/master'

    steps:
      - name: Notify deployment failure
        run: |
          echo "❌ 배포 실패 알림"
          echo "브랜치: master"
          echo "커밋: ${{ github.sha }}"
          echo "시간: $(date)"
          echo "로그를 확인하여 문제를 해결하세요."
